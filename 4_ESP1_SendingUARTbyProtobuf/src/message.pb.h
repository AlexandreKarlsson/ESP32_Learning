// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum Message_CommandType : int {
  Message_CommandType_COMMAND = 0,
  Message_CommandType_ACK = 1,
  Message_CommandType_REQ = 2,
  Message_CommandType_Message_CommandType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Message_CommandType_Message_CommandType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Message_CommandType_IsValid(int value);
constexpr Message_CommandType Message_CommandType_CommandType_MIN = Message_CommandType_COMMAND;
constexpr Message_CommandType Message_CommandType_CommandType_MAX = Message_CommandType_REQ;
constexpr int Message_CommandType_CommandType_ARRAYSIZE = Message_CommandType_CommandType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Message_CommandType_descriptor();
template<typename T>
inline const std::string& Message_CommandType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Message_CommandType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Message_CommandType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Message_CommandType_descriptor(), enum_t_value);
}
inline bool Message_CommandType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Message_CommandType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Message_CommandType>(
    Message_CommandType_descriptor(), name, value);
}
// ===================================================================

class Message PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  inline Message() : Message(nullptr) {}
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Message* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  protected:
  explicit Message(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Message_CommandType CommandType;
  static constexpr CommandType COMMAND =
    Message_CommandType_COMMAND;
  static constexpr CommandType ACK =
    Message_CommandType_ACK;
  static constexpr CommandType REQ =
    Message_CommandType_REQ;
  static inline bool CommandType_IsValid(int value) {
    return Message_CommandType_IsValid(value);
  }
  static constexpr CommandType CommandType_MIN =
    Message_CommandType_CommandType_MIN;
  static constexpr CommandType CommandType_MAX =
    Message_CommandType_CommandType_MAX;
  static constexpr int CommandType_ARRAYSIZE =
    Message_CommandType_CommandType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CommandType_descriptor() {
    return Message_CommandType_descriptor();
  }
  template<typename T>
  static inline const std::string& CommandType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CommandType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CommandType_Name.");
    return Message_CommandType_Name(enum_t_value);
  }
  static inline bool CommandType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CommandType* value) {
    return Message_CommandType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 4,
    kCmdTypeFieldNumber = 1,
    kMsgSizeFieldNumber = 2,
    kSeqNumFieldNumber = 3,
    kMsgEndFieldNumber = 5,
  };
  // bytes payload = 4;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 cmdType = 1;
  void clear_cmdtype();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmdtype() const;
  void set_cmdtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmdtype() const;
  void _internal_set_cmdtype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msgSize = 2;
  void clear_msgsize();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgsize() const;
  void set_msgsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgsize() const;
  void _internal_set_msgsize(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 seqNum = 3;
  void clear_seqnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 seqnum() const;
  void set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_seqnum() const;
  void _internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 msgEnd = 5;
  void clear_msgend();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgend() const;
  void set_msgend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgend() const;
  void _internal_set_msgend(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmdtype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgsize_;
  ::PROTOBUF_NAMESPACE_ID::uint32 seqnum_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// uint32 cmdType = 1;
inline void Message::clear_cmdtype() {
  cmdtype_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_cmdtype() const {
  return cmdtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::cmdtype() const {
  // @@protoc_insertion_point(field_get:Message.cmdType)
  return _internal_cmdtype();
}
inline void Message::_internal_set_cmdtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmdtype_ = value;
}
inline void Message::set_cmdtype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmdtype(value);
  // @@protoc_insertion_point(field_set:Message.cmdType)
}

// uint32 msgSize = 2;
inline void Message::clear_msgsize() {
  msgsize_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_msgsize() const {
  return msgsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::msgsize() const {
  // @@protoc_insertion_point(field_get:Message.msgSize)
  return _internal_msgsize();
}
inline void Message::_internal_set_msgsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msgsize_ = value;
}
inline void Message::set_msgsize(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgsize(value);
  // @@protoc_insertion_point(field_set:Message.msgSize)
}

// uint32 seqNum = 3;
inline void Message::clear_seqnum() {
  seqnum_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_seqnum() const {
  return seqnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::seqnum() const {
  // @@protoc_insertion_point(field_get:Message.seqNum)
  return _internal_seqnum();
}
inline void Message::_internal_set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  seqnum_ = value;
}
inline void Message::set_seqnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_seqnum(value);
  // @@protoc_insertion_point(field_set:Message.seqNum)
}

// bytes payload = 4;
inline void Message::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& Message::payload() const {
  // @@protoc_insertion_point(field_get:Message.payload)
  return _internal_payload();
}
inline void Message::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:Message.payload)
}
inline std::string* Message::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:Message.payload)
  return _internal_mutable_payload();
}
inline const std::string& Message::_internal_payload() const {
  return payload_.Get();
}
inline void Message::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Message::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Message.payload)
}
inline void Message::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Message.payload)
}
inline void Message::set_payload(const void* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Message.payload)
}
inline std::string* Message::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Message::release_payload() {
  // @@protoc_insertion_point(field_release:Message.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Message::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Message.payload)
}

// uint32 msgEnd = 5;
inline void Message::clear_msgend() {
  msgend_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::_internal_msgend() const {
  return msgend_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::msgend() const {
  // @@protoc_insertion_point(field_get:Message.msgEnd)
  return _internal_msgend();
}
inline void Message::_internal_set_msgend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msgend_ = value;
}
inline void Message::set_msgend(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgend(value);
  // @@protoc_insertion_point(field_set:Message.msgEnd)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Message_CommandType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Message_CommandType>() {
  return ::Message_CommandType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
