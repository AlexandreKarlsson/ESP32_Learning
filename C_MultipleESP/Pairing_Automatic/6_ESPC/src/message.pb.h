/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_MESSAGE_PB_H_INCLUDED
#define PB_MESSAGE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _Message_CommandType {
    Message_CommandType_COMMAND = 0,
    Message_CommandType_ACK = 1,
    Message_CommandType_REQ = 2
} Message_CommandType;

/* Struct definitions */
typedef struct _Message {
    uint32_t cmdType;
    uint32_t msgSize;
    uint32_t seqNum;
    uint32_t payload;
    uint32_t msgEnd;
} Message;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _Message_CommandType_MIN Message_CommandType_COMMAND
#define _Message_CommandType_MAX Message_CommandType_REQ
#define _Message_CommandType_ARRAYSIZE ((Message_CommandType)(Message_CommandType_REQ+1))



/* Initializer values for message structs */
#define Message_init_default                     {0, 0, 0, 0, 0}
#define Message_init_zero                        {0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Message_cmdType_tag                      1
#define Message_msgSize_tag                      2
#define Message_seqNum_tag                       3
#define Message_payload_tag                      4
#define Message_msgEnd_tag                       5

/* Struct field encoding specification for nanopb */
#define Message_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   cmdType,           1) \
X(a, STATIC,   SINGULAR, UINT32,   msgSize,           2) \
X(a, STATIC,   SINGULAR, UINT32,   seqNum,            3) \
X(a, STATIC,   SINGULAR, UINT32,   payload,           4) \
X(a, STATIC,   SINGULAR, UINT32,   msgEnd,            5)
#define Message_CALLBACK NULL
#define Message_DEFAULT NULL

extern const pb_msgdesc_t Message_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Message_fields &Message_msg

/* Maximum encoded size of messages (where known) */
#define Message_size                             30

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
